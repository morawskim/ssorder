<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Custom" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
    <description>The custom coding standard.</description>

    <file>frontend/</file>
    <file>common/</file>
    <file>console/</file>
    <exclude-pattern>*/vendor/</exclude-pattern>
    <exclude-pattern>*/provision/</exclude-pattern>

    <arg name="basepath" value="."/>
    <arg name="colors"/>
    <arg name="parallel" value="75"/>
    <arg value="np"/>

    <!-- To list all standards run ./vendor/bin/phpcs -i -->
    <!-- Include the whole PSR2 standard -->
    <rule ref="PSR2">
        <!-- to disable a single error -->
        <!-- <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction"/> -->
        <!-- or to disable the whole sniff -->
        <!-- <exclude name="Squiz.Functions.MultiLineFunctionDeclaration"/> -->
    </rule>

    <!-- To list all Sniffers run ./vendor/bin/phpcs -e -->
    <!-- Include some specific sniffs from the Generic standard -->
    <rule ref="Generic.Commenting.Todo"/>
    <!--    Forbid empty statements eg. CATCH block-->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
         <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>

    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
                <element key="phpinfo" value="null"/>
                <element key="var_dump" value="null"/>

                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="compact" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="doubleval" value="floatval"/>
                <element key="extract" value="null" />
                <element key="fputs" value="fwrite" />
                <element key="ini_alter" value="ini_set" />
                <element key="is_double" value="is_float" />
                <element key="is_integer" value="is_int" />
                <element key="is_long" value="is_int" />
                <element key="is_null" value="null" />
                <element key="is_real" value="is_float" />
                <element key="is_writeable" value="is_writable" />
                <element key="join" value="implode" />
                <element key="key_exists" value="array_key_exists" />
                <element key="pos" value="current" />
                <element key="settype" value="null" />
                <element key="show_source" value="highlight_file" />
                <element key="sizeof" value="count" />
                <element key="strchr" value="strst" />
            </property>
        </properties>
    </rule>
    <rule ref="Generic.PHP.NoSilencedErrors">
        <properties>
            <property name="error" value="true" />
        </properties>
    </rule>

    <!-- Run against the PHPCompatibility ruleset -->
    <!-- Require phpcompatibility/php-compatibility package -->
    <rule ref="PHPCompatibility"/>
    <!-- Check for cross-version support for PHP 7.3 and higher. -->
    <config name="testVersion" value="7.3-"/>
    <config name="installed_paths" value="vendor/phpcompatibility/php-compatibility" />

    <!-- Include the whole YII2 standard -->
    <!-- You can install them by run `composer require &#45;&#45;dev yiisoft/yii2-coding-standards` -->
    <rule ref="./vendor/yiisoft/yii2-coding-standards/Yii2/ruleset.xml"/>
</ruleset>

